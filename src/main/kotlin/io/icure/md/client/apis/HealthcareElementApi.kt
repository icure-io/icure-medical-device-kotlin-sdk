/**
 * ICure Medical Device Micro Service
 *
 * ICure Medical Device Micro Service
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.md.client.apis

import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.md.client.filter.Filter
import io.icure.md.client.models.HealthcareElement
import io.icure.md.client.models.PaginatedListHealthcareElement
import kotlinx.coroutines.ExperimentalCoroutinesApi
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
interface HealthcareElementApi {

    /**
     * Create a [HealthcareElement]
     * When modifying an healthcare element, you must ensure that the rev obtained when getting or creating the healthcare element is present as the rev is used to guarantee that the healthcare element has not been modified by a third party.
     * @param patientId
     * @param healthcareElement The healthcare element that must be created in the database.
     * @return Returns the created or modified healthcare element as a [HealthcareElement] object, with an updated rev.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createOrModifyHealthcareElement(patientId: kotlin.String, healthcareElement: HealthcareElement): HealthcareElement

    /**
     * Create a batch of [HealthcareElement]
     * When modifying an healthcare element, you must ensure that the rev obtained when getting or creating the healthcare element is present as the rev is used to guarantee that the healthcare element has not been modified by a third party.
     * @param patientId
     * @param healthcareElement The healthcare element that must be created in the database.
     * @return Returns the created or modified healthcare element as a [HealthcareElement] object, with an updated rev.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createOrModifyHealthcareElements(patientId: kotlin.String, healthcareElement: kotlin.collections.List<HealthcareElement>): kotlin.collections.List<HealthcareElement>

    /**
     * Delete a Healthcare Element
     * Deletes the healthcare element identified by the provided unique [healthElementId].
     * @param healthElementId
     * @return Returns the rev of the deleted object.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws ClientException if there is no healthcare element with the provided [healthElementId].
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteHealthcareElement(healthElementId: kotlin.String): kotlin.String

    /**
     * Load healthcare elements from the database by filtering them using the provided [filter].
     * Filters are complex selectors that are built by combining basic building blocks. Examples of filters available for Healthcare element are AllHealthcareElementsFilter and HealthcareElementsByIdsFilter. This method returns a paginated list of healthcare element (with a cursor that lets you query the following items).
     * @param filter The Filter object that describes which condition(s) the elements whose the ids should be returned must fulfill
     * @param nextHealthElementId The id of the first [HealthcareElement] in the next page (optional)
     * @param limit The number of healthcare elements to return in the queried page (optional)
     * @return Returns a PaginatedList of Healthcare elements.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterHealthcareElement(filter: Filter<HealthcareElement>, nextHealthElementId: kotlin.String?, limit: kotlin.Int?): PaginatedListHealthcareElement

    /**
     * Get a [HealthcareElement]
     * Each [HealthcareElement] is uniquely identified by a healthcare element id. The healthcare element id is a UUID. This [healthcareElementId] is the preferred method to retrieve one specific healthcare element.
     * @param healthcareElementId
     * @return Returns the fetched healthcare element as a [HealthcareElement] object
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws ClientException if there is no healthcare element with the provided [healthcareElementId].
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthcareElement(healthcareElementId: kotlin.String): HealthcareElement

    /**
     * Load healthcare elements ids from the database by filtering them using the provided [filter].
     * Filters are complex selectors that are built by combining basic building blocks. Examples of filters available for Healthcare element are AllHealthcareElementsFilter and HealthcareElementsByIdsFilter. This method returns a paginated list of healthcare element (with a cursor that lets you query the following items).
     * @param filter The Filter object that describes which condition(s) the elements whose the ids should be returned must fulfill
     * @return Returns a list of all healthcare elements ids matching the filter.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun matchHealthcareElement(filter: Filter<HealthcareElement>): kotlin.collections.List<kotlin.String>

    /**
     * Give access to another dataOwner to the [healthcareElement]
     * @param healthcareElement dataSample to giveAccessTo [delegateTo]
     * @param delegateTo dataOwnerId to giveAccessTo
     * @return Returns the updated [HealthcareElement].
     *
     * Data owner id can be either a:
     * - healthcarePartyId,
     * - patientId
     * - deviceId
     *
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SesssionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun giveAccessTo(healthcareElement: HealthcareElement, delegateTo: String): HealthcareElement
}
