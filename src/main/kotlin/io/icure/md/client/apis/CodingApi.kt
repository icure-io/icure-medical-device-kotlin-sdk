/**
 * ICure Medical Device Micro Service
 *
 * ICure Medical Device Micro Service
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.md.client.apis

import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.md.client.models.Coding
import io.icure.md.client.models.Filter
import io.icure.md.client.models.PaginatedListCoding
import kotlinx.coroutines.ExperimentalCoroutinesApi
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
interface CodingApi {

    /**
     * Create or update a [Coding]
     * When modifying a coding, you must ensure that the rev obtained when getting or creating the coding is present as the rev is used to guarantee that the coding has not been modified by a third party.
     * @param coding
     * @return Returns the created or modified coding as a [Coding] object, with an updated rev.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createOrModifyCoding(coding: Coding): Coding

    /**
     * Create or update a batch of [Coding]
     * When modifying codings, you must ensure that the rev obtained when getting or creating the coding is present as the rev is used to guarantee that the coding has not been modified by a third party.
     * @param coding
     * @return Returns the created or modified codings as a [Coding] objects, with updated revs.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createOrModifyCodings(coding: kotlin.collections.List<Coding>): kotlin.collections.List<Coding>

    /**
     * Delete a [Coding]
     * Deletes the coding identified by the provided unique [codingId].
     * @param codingId
     * @return Returns the rev of the deleted object.
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws ClientException if there is no coding with the provided [codingId].
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteCoding(codingId: kotlin.String): kotlin.String

    /**
     * Load codings from the database by filtering them using the provided [filter].
     * Filters are complex selectors that are built by combining basic building blocks. Examples of filters available for [Coding] are AllCodingsFilter and CodingsByIdsFilter. This method returns a paginated list of coding (with a cursor that lets you query the following items).
     * @param filter The Filter object that describes which condition(s) the elements whose the ids should be returned must fulfill
     * @param nextCodingId The id of the first coding in the next page (optional)
     * @param limit The number of codings to return in the queried page (optional)
     * @return Returns a PaginatedList of [Coding].
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterCoding(filter: Filter, nextCodingId: kotlin.String?, limit: kotlin.Int?): PaginatedListCoding

    /**
     * Get a [Coding]
     * Each coding is uniquely identified by a coding id. The coding id is a UUID. This [codingId] is the preferred method to retrieve one specific coding.
     * @param codingId
     * @return Returns the fetched coding as a [Coding] object
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws ClientException if there is no coding with the provided [codingId].
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCoding(codingId: kotlin.String): Coding

    /**
     * Load coding ids from the database by filtering them using the provided [filter].
     * Filters are complex selectors that are built by combining basic building blocks. Examples of filters available for [Coding] are AllCodingsFilter and CodingsByIdsFilter. This method returns a paginated list of coding (with a cursor that lets you query the following items).
     * @param filter The Filter object that describes which condition(s) the elements whose the ids should be returned must fulfill
     * @return Returns a list of all [Coding] ids matching the [filter].
     * @throws ClientException if you make this call without providing an authentication token (BASIC, SessionId).
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun matchCoding(filter: Filter): kotlin.collections.List<kotlin.String>

}
