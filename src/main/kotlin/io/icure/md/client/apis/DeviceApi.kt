/**
 * ICure Medical Device Micro Service
 *
 * ICure Medical Device Micro Service
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.md.client.apis

import io.icure.md.client.models.Filter
import io.icure.md.client.models.MedicalDevice
import io.icure.md.client.models.PaginatedListMedicalDevice

import kotlinx.coroutines.ExperimentalCoroutinesApi
 
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException

import kotlinx.coroutines.flow.flowOf
import java.nio.ByteBuffer
import java.util.*
import javax.inject.Named
import kotlinx.coroutines.flow.Flow
import java.net.URLEncoder

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
interface DeviceApi {

    /**
    * Create or update a Device
    * 
    * @param medicalDevice  
    * @return MedicalDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createOrModifyMedicalDevice(medicalDevice: MedicalDevice) : MedicalDevice 

    /**
    * Create or update a batch of Devices
    * 
    * @param medicalDevice  
    * @return kotlin.collections.List<MedicalDevice>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createOrModifyMedicalDevices(medicalDevice: kotlin.collections.List<MedicalDevice>) : kotlin.collections.List<MedicalDevice> 

    /**
    * Delete a Device
    * 
    * @param medicalDeviceId  
    * @return kotlin.String
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteMedicalDevice(medicalDeviceId: kotlin.String) : kotlin.String 

    /**
    * Delete Devices
    * 
    * @param requestBody  
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteMedicalDevices(requestBody: kotlin.collections.List<kotlin.String>) : kotlin.collections.List<kotlin.String> 

    /**
    * Find Devices using a filter
    * 
    * @param filter  
    * @return PaginatedListMedicalDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterMedicalDevices(filter: Filter) : PaginatedListMedicalDevice 

    /**
    * Get a Medical Device
    * 
    * @param medicalDeviceId  
    * @return MedicalDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getMedicalDevice(medicalDeviceId: kotlin.String) : MedicalDevice 

    /**
    * Find Devices using a filter
    * 
    * @param filter  
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun matchMedicalDevices(filter: Filter) : kotlin.collections.List<kotlin.String> 

}
